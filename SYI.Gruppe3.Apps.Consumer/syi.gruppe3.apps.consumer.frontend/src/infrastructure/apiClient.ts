//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module ApiClient {

    export class Client {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : window as any;
            this.baseUrl = baseUrl ?? "";
        }

        /**
         * @param body (optional) 
         * @return Success
         */
        query(body: DataQueryModel | undefined): Promise<DataResponseModel> {
            let url_ = this.baseUrl + "/api/data/query";
            url_ = url_.replace(/[?&]$/, "");

            const content_ = JSON.stringify(body);

            let options_: RequestInit = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };

            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processQuery(_response);
            });
        }

        protected processQuery(response: Response): Promise<DataResponseModel> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                    let result200: any = null;
                    let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result200 = DataResponseModel.fromJS(resultData200);
                    return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<DataResponseModel>(null as any);
        }
    }

    export class DataQueryModel implements IDataQueryModel {
        sqlQuery?: string | undefined;
        limitOverride?: number | undefined;
        orderBy?: string | undefined;
        constructor(data?: IDataQueryModel) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }

        init(_data?: any) {
            if (_data) {
                this.sqlQuery = _data["sqlQuery"];
                this.limitOverride = _data["limitOverride"];
                this.orderBy = _data["orderBy"];
            }
        }

        static fromJS(data: any): DataQueryModel {
            data = typeof data === 'object' ? data : {};
            let result = new DataQueryModel();
            result.init(data);
            return result;
        }

        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["sqlQuery"] = this.sqlQuery;
            data["limitOverride"] = this.limitOverride;
            data["orderBy"] = this.orderBy;
            return data;
        }
    }

    export interface IDataQueryModel {
        sqlQuery?: string | undefined;
        limitOverride?: number | undefined;
        orderBy?: string | undefined;
    }

    export class DataResponseModel implements IDataResponseModel {
        renderedSQLQuery?: string | undefined;
        errorMessage?: string | undefined;
        readonly hasError?: boolean;
        data?: { [key: string]: any; }[] | undefined;

        constructor(data?: IDataResponseModel) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }

        init(_data?: any) {
            if (_data) {
                this.renderedSQLQuery = _data["renderedSQLQuery"];
                this.errorMessage = _data["errorMessage"];
                (<any>this).hasError = _data["hasError"];
                if (Array.isArray(_data["data"])) {
                    this.data = [] as any;
                    for (let item of _data["data"])
                        this.data!.push(item);
                }
            }
        }

        static fromJS(data: any): DataResponseModel {
            data = typeof data === 'object' ? data : {};
            let result = new DataResponseModel();
            result.init(data);
            return result;
        }

        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["renderedSQLQuery"] = this.renderedSQLQuery;
            data["errorMessage"] = this.errorMessage;
            data["hasError"] = this.hasError;
            if (Array.isArray(this.data)) {
                data["data"] = [];
                for (let item of this.data)
                    data["data"].push(item);
            }
            return data;
        }
    }

    export interface IDataResponseModel {
        renderedSQLQuery?: string | undefined;
        errorMessage?: string | undefined;
        hasError?: boolean;
        data?: { [key: string]: any; }[] | undefined;
    }

    export class ApiException extends Error {
        message: string;
        status: number;
        response: string;
        headers: { [key: string]: any; };
        result: any;

        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();

            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }

        protected isApiException = true;

        static isApiException(obj: any): obj is ApiException {
            return obj.isApiException === true;
        }
    }

    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new ApiException(message, status, response, headers, null);
    }

}