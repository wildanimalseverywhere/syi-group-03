//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module ApiClient {

    export class Client {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : window as any;
            this.baseUrl = baseUrl ?? "";
        }

        /**
         * @param borough (optional) 
         * @param yearFrom (optional) 
         * @param yearTo (optional) 
         * @return Success
         */
        query(borough: string | undefined, yearFrom: number | undefined, yearTo: number | undefined): Promise<DataResponseModel> {
            let url_ = this.baseUrl + "/api/data/query?";
            if (borough === null)
                throw new Error("The parameter 'borough' cannot be null.");
            else if (borough !== undefined)
                url_ += "borough=" + encodeURIComponent("" + borough) + "&";
            if (yearFrom === null)
                throw new Error("The parameter 'yearFrom' cannot be null.");
            else if (yearFrom !== undefined)
                url_ += "yearFrom=" + encodeURIComponent("" + yearFrom) + "&";
            if (yearTo === null)
                throw new Error("The parameter 'yearTo' cannot be null.");
            else if (yearTo !== undefined)
                url_ += "yearTo=" + encodeURIComponent("" + yearTo) + "&";
            url_ = url_.replace(/[?&]$/, "");

            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };

            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processQuery(_response);
            });
        }

        protected processQuery(response: Response): Promise<DataResponseModel> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                    let result200: any = null;
                    let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result200 = DataResponseModel.fromJS(resultData200);
                    return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<DataResponseModel>(null as any);
        }
    }

    export class DataResponseItem implements IDataResponseItem {
        borough?: string | undefined;
        numberOfPersonsInjured?: number;
        numberOfPersonsKilled?: number;
        year?: number;

        constructor(data?: IDataResponseItem) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }

        init(_data?: any) {
            if (_data) {
                this.borough = _data["borough"];
                this.numberOfPersonsInjured = _data["numberOfPersonsInjured"];
                this.numberOfPersonsKilled = _data["numberOfPersonsKilled"];
                this.year = _data["year"];
            }
        }

        static fromJS(data: any): DataResponseItem {
            data = typeof data === 'object' ? data : {};
            let result = new DataResponseItem();
            result.init(data);
            return result;
        }

        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["borough"] = this.borough;
            data["numberOfPersonsInjured"] = this.numberOfPersonsInjured;
            data["numberOfPersonsKilled"] = this.numberOfPersonsKilled;
            data["year"] = this.year;
            return data;
        }
    }

    export interface IDataResponseItem {
        borough?: string | undefined;
        numberOfPersonsInjured?: number;
        numberOfPersonsKilled?: number;
        year?: number;
    }

    export class DataResponseModel implements IDataResponseModel {
        renderedSQLQuery?: string | undefined;
        errorMessage?: string | undefined;
        readonly hasError?: boolean;
        items?: DataResponseItem[] | undefined;

        constructor(data?: IDataResponseModel) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }

        init(_data?: any) {
            if (_data) {
                this.renderedSQLQuery = _data["renderedSQLQuery"];
                this.errorMessage = _data["errorMessage"];
                (<any>this).hasError = _data["hasError"];
                if (Array.isArray(_data["items"])) {
                    this.items = [] as any;
                    for (let item of _data["items"])
                        this.items!.push(DataResponseItem.fromJS(item));
                }
            }
        }

        static fromJS(data: any): DataResponseModel {
            data = typeof data === 'object' ? data : {};
            let result = new DataResponseModel();
            result.init(data);
            return result;
        }

        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["renderedSQLQuery"] = this.renderedSQLQuery;
            data["errorMessage"] = this.errorMessage;
            data["hasError"] = this.hasError;
            if (Array.isArray(this.items)) {
                data["items"] = [];
                for (let item of this.items)
                    data["items"].push(item.toJSON());
            }
            return data;
        }
    }

    export interface IDataResponseModel {
        renderedSQLQuery?: string | undefined;
        errorMessage?: string | undefined;
        hasError?: boolean;
        items?: DataResponseItem[] | undefined;
    }

    export class ApiException extends Error {
        override message: string;
        status: number;
        response: string;
        headers: { [key: string]: any; };
        result: any;

        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();

            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }

        protected isApiException = true;

        static isApiException(obj: any): obj is ApiException {
            return obj.isApiException === true;
        }
    }

    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new ApiException(message, status, response, headers, null);
    }

}